import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Load the trained model
model_path = 'car_price_prediction_model.pkl'
try:
    model = joblib.load(model_path)
    st.success(f"Model loaded successfully from {model_path}")
except Exception as e:
    st.error(f"Error loading the model: {e}")

# Streamlit app code
st.title('Car Price Prediction')

# Input fields for user to enter car details
present_price = st.number_input('Present Price (in lakhs)', min_value=0.0, max_value=50.0, value=0.0, step=0.1)
kms_driven = st.number_input('Kms Driven', min_value=0, max_value=500000, value=0, step=1000)
owner = st.selectbox('Owner', [0, 1, 2, 3])
years_old = st.number_input('Years Old', min_value=0, max_value=50, value=0, step=1)
fuel_type = st.selectbox('Fuel Type', ['Petrol', 'Diesel', 'CNG'])
seller_type = st.selectbox('Seller Type', ['Dealer', 'Individual'])
transmission = st.selectbox('Transmission', ['Manual', 'Automatic'])

# One-hot encoding for categorical features
fuel_type_diesel = 1 if fuel_type == 'Diesel' else 0
fuel_type_petrol = 1 if fuel_type == 'Petrol' else 0
seller_type_individual = 1 if seller_type == 'Individual' else 0
transmission_manual = 1 if transmission == 'Manual' else 0

# Create a DataFrame for the input
input_data = pd.DataFrame([[present_price, kms_driven, owner, years_old, 
                            fuel_type_diesel, fuel_type_petrol, 
                            seller_type_individual, transmission_manual]], 
                          columns=['Present_Price', 'Kms_Driven', 'Owner', 'Years Old', 
                                   'Fuel_Type_Diesel', 'Fuel_Type_Petrol', 
                                   'Seller_Type_Individual', 'Transmission_Manual'])

# Debugging: Check input_data creation
st.write('Input Data:')
st.write(input_data)

# Predict the selling price
if st.button('Predict'):
    try:
        prediction = model.predict(input_data)
        st.success(f'Predicted Selling Price: â‚¹{prediction[0]:.2f} lakhs')
    except Exception as e:
        st.error(f"Error during prediction: {e}")

# Display R-squared scores for the models
metrics_df = pd.DataFrame({
    'Model': ['Linear Regression', 'Random Forest', 'Decision Tree', 'Multiple Linear Regression'],
    'R-squared': [0.85, 0.90, 0.75, 0.83]  # Replace with actual scores from your notebook
})

st.write('Model Performance:')
st.dataframe(metrics_df)
